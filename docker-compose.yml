version: "4"

services:
  eureka-server:
    container_name: eureka-server
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    image: eureka-server:1.0.0
    ports:
      - "8761:8761"  # Eureka Dashboard
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
  # RabbitMQ (Message Broker)
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - microservices-network
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
  h2-db:
    image: oscarfonts/h2
    container_name: h2-database
    environment:
      H2_OPTIONS: -web -webAllowOthers -webPort 8081 -tcp -tcpAllowOthers -tcpPort 9092 -ifNotExists
    ports:
      - "8089:8089"
      - "9092:9092"
    volumes:
      - h2-data:/opt/h2-data
    restart: unless-stopped

  # Пример микросервиса 1: User Service
  cdr-service:
    build:
      context: ./cdr
      dockerfile: Dockerfile
    container_name: cdr-service
    ports:
      - "8081:8081"
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_RABBITMQ_HOST=rabbitmq
    depends_on:
      - eureka-server
      - rabbitmq
      - h2-db

  # Пример микросервиса 2: Order Service
#  brt-service:
#    build:
#      context: ./brt
#      dockerfile: Dockerfile
#    container_name: order-service
#    ports:
#      - "8082:8082"
#    networks:
#      - microservices-network
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
#      - SPRING_RABBITMQ_HOST=rabbitmq
#    depends_on:
#      - eureka-server
#      - rabbitmq

networks:
  microservices-network:
    driver: bridge
volumes:
  h2-data: